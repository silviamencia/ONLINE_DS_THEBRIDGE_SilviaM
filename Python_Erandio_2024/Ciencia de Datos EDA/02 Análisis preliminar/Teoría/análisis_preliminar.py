# -*- coding: utf-8 -*-
"""Análisis preliminar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UF4Wubxquc390XRIaUoJrszkwJ1wriTv

# Importamos las librerias necesarias
"""

import pandas as pd
import numpy as np

"""# Leemos y cargamos los datos"""

df2 = pd.read_csv("/content/sample_data/Ejemplo_Análisis preliminar.csv",sep=";",encoding='latin-1')

"""# Análisis de los datos

## Tipado de las variables
"""

# Conocemos las clases de las variables del dataset usando dtypes
df2.dtypes

"""## Resumen estadístico de los datos"""

# Realizamos un pequeño resumen estadistico de los datos para conocerlos mejor
df2.describe()
descripcion = df2.describe()

"""### Variable por variable"""

# Si quisieramos analizar una variable en concreto
df2['Max TemperatureC'].describe()

enumerate(df2.columns)

df2.iloc[:,1].describe()

"""# Transformación de los datos

## Corrección de los nombres de las variables

Los nombres de algunas de las variables tiene un espacio intercalado, convendria eliminarlo para evitar problemas a la hora de llamar a estas columnas
"""

df2.columns
df2.columns = df2.columns.str.replace(' ','')

"""## Columna categórica "Eventos"

Si analizamos la variable Events, podemos ver que tenemos valores NAN.

No son valores perdidos, en este caso siginifica que ese da no hubo ningún evento climatológico. Por lo tanto, cambiamos el `nan` por "No_evento"
"""

eventos_unicos = df2['Events'].unique()
df2['Events'] = df2['Events'].fillna('No_Evento')
df2['Events'].unique()

"""## Conversión de Date a tipo `DateTime`

Otro error que se puede observar es que la fecha la toma como object

Debemos convertirla a tipo fecha
"""

df2.dtypes
df2['CET1'] = pd.to_datetime(df2['CET'])
# df2['CET'] = pd.to_datetime(df2['CET'], format='%d/%m/%Y')

"""# Análisis gráfico

Análisis preliminar de los datos mediante GRÁFICOS

Podemos obtener alguna información relevante o no.
Esto sirve para tener una primera idea de las variables.

## Boxplot
"""

df2['MaxTemperatureC'].plot(kind='box')

"""## Boxplot por categorías

Con los diagramas Boxplot podemos observar cómo difieren los valores de una variable numérica en función de las distintas categorías de otra categórica.

Por ejemplo: Temperatura max en función de los eventos
"""

import seaborn as sns
sns.boxplot(x=df2['Events'], y=df2['MaxTemperatureC'])
# Giramos las categorías del eje y para que se lean
# sns.boxplot(x=df2['MaxTemperatureC'], y=df2['Events'], orient="y");

"""## Relación entre variables numéricas

Mediante un gráfico de dispersión observamos cada registro como un punto en un plano de dos dimensiones usando como coordenadas los valores de ese registro en cada una de las características.
"""

import matplotlib.pyplot as plt
plt.plot(df2['MaxTemperatureC'], df2['MinTemperatureC'],'.');

"""Si sólo coloco una variable, la otra será el índice.

Modificando la almohadilla podemos seleccionar distintas marcas y sus colores
"""

# Distribución
# plt.plot(df2['MaxTemperatureC'],'.')
# plt.plot(df2['MaxTemperatureC'],'-')
# plt.plot(df2['MaxTemperatureC'],'*')
# plt.plot(df2['MaxTemperatureC'],'m')
# plt.plot(df2['MaxTemperatureC'],'x')
plt.plot(df2['MaxTemperatureC'],'xm')
# plt.plot(df2['MaxTemperatureC'],'xr')
# plt.plot(df2['MaxTemperatureC'],'^g')
plt.show()

"""## Histogramas

Un histograma es una representación gráfica de la distribución de un conjunto de datos. Se utiliza para visualizar la **frecuencia con la que aparecen diferentes valores o rangos de valores en un conjunto de datos**.

Características principales de un histograma:

1. El eje horizontal (eje x) representa los valores o rangos de valores de los datos, generalmente divididos en intervalos o "bins".

2. El eje vertical (eje y) representa la frecuencia o el conteo de los valores que caen dentro de cada intervalo.

3. Los datos se agrupan en barras verticales, donde la altura de cada barra representa la frecuencia de los valores dentro de ese intervalo.


Los histogramas son útiles para:

1. Visualizar la distribución de los datos y detectar patrones.

2. Identificar la forma de la distribución (simétrica, sesgada, bimodal, etc.).

3. Determinar el rango y la dispersión de los datos.

4. Comparar distribuciones de diferentes conjuntos de datos.
"""

df2.hist(column='MaxTemperatureC', bins=40);

"""## Gráfico de barras

En el caso de variables categóricas no necesito hacer "bins" puesto que barra se correspondrá con una categoría, por lo que usaremos gráficos de barras.
"""

df2['Events'].value_counts().plot(x='Eventos',y='frecuencia',
                                           kind='bar', legend=True,title='Distribucion de los eventos')

"""# Otros gráficos interesantes

## Gráfico de correlación entre las variables
"""

import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

"""La correlación sólo puede verse entre variables numéricas por lo que filtramos las variables que no lo son"""

df2_num = df2[df2.describe().columns]

plt.matshow(df2_num.corr())

# 1.2 COLORES
# Hay que ejecutarlo todo a la vez.
f, ax = plt.subplots(figsize=(10, 8))
corr = df2_num.corr()
sns.heatmap(corr, annot = True, mask=np.zeros_like(corr, dtype=bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),square=True, ax=ax);

"""## Diagrama de dispersión

Este gráfico no admite NAs.
Dibuja gráficos de dispersión para cada par de variables en el conjunto de datos.

Consume mucha capacidad de cómputo si usamos demasiadas variables ya que el número de gráficos crece al cuadrado.

7 variables -> 49 gráficos

Conviene centrarse en aquellas columnas que han dado alta correlación en el gráfico anterior.
"""

df2_num.dropna().columns

variables_correladas = ['MaxTemperatureC', 'MeanTemperatureC', 'MinTemperatureC',
                        'MaxHumidity', 'MeanHumidity', 'MinHumidity']

import seaborn as sns
datoscomp=df2_num.dropna()[variables_correladas]
sns.pairplot(datoscomp);