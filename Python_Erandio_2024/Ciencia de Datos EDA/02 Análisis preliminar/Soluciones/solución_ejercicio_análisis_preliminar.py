# -*- coding: utf-8 -*-
"""Solución Ejercicio Análisis preliminar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1piReCEcXLxzWpWYU1g_Zx05eC9psQ7Pn

# Ejercicios Análisis Preliminar

## 1. Cargar los datos de trainmod.
"""

# Importamos las librerias necesarias
import pandas as pd
import numpy as np

#1. Cargar los datos de trainmod (Los creados en el apartado anterior).
df2 = pd.read_csv("/content/sample_data/trainmod.csv",sep=",",encoding='latin-1')

"""## 2. Mostrar los datos.

"""

df2

df2.head(5)

"""El método info nos devuelve una impresión en pantalla, no un objeto.

Eso es poco reutilizable
"""

informacion = df2.info()

print(informacion)

"""## 3. Realizar un resumen estadístico de los datos y realizar una interpretación.

"""

df2.describe()

descripcion = df2.describe().T

df2.describe(include = "all").T

df2.dtypes

descripcion["Tipos"] = df2.dtypes

descripcion

df2.isnull().sum()

descripcion["Nulos"] = df2.isnull().sum()
descripcion

"""## 4. Determinar los niveles existentes para la variable “Crisis”.

"""

df2['Crisis'].value_counts()

"""## 5. Sustituir los “Si” por “Crisis” y los “No” por “Burbuja”.

"""

df2['Crisis']=df2['Crisis'].str.replace('Si','Crisis')
df2['Crisis']=df2['Crisis'].str.replace('No','Burbuja')

df2['Crisis'].value_counts().plot(x='Crisis',y='frecuencia', kind='bar', legend=True,title='Distribucion de la Viviendas')

"""## 6. Determinar la clase de cada uno de los datos."""

df2.dtypes

"""## 7. Realizar un gráfico del precio de venta."""

import matplotlib.pyplot as plt
plt.plot(df2['SalePrice'],'.')

df2['SalePrice'].plot(kind = 'box')

df2.boxplot(column = "SalePrice")

"""## 8. Realizar un histograma del precio de venta."""

df2['SalePrice'].plot(kind = "hist", bins = 40)

df2.hist(column="SalePrice", bins=40)

"""## 9. Graficar el precio de venta en función de la variable MSZoning..

"""

import seaborn as sns
sns.boxplot(x=df2['MSZoning'], y=df2['SalePrice'])

sns.boxplot(x=df2['SalePrice'], y=df2['MSZoning'])

"""## 10. Mostrar, gráficamente la relación entre el precio de venta y “GrLivArea”. ¿Cómo es?

"""

plt.plot(df2['SalePrice'],df2['GrLivArea'],'.')

plt.plot(df2['SalePrice'],df2['GrLivArea'],'.')

# Calcular los parámetros de la regresión lineal
m, b = np.polyfit(df2['SalePrice'], df2['GrLivArea'], 1)

# Dibujar la recta de regresión
plt.plot(df2['SalePrice'], m * df2['SalePrice'] + b, color='red')

# Añadir etiquetas y título si es necesario
plt.xlabel('SalePrice')
plt.ylabel('GrLivArea')
plt.title('Gráfico de Dispersión con Recta de Regresión')

# Mostrar el gráfico
plt.show()

"""### ¿Y la relación con “LotArea”?."""

plt.plot(df2['SalePrice'],df2['LotArea'],'.')

"""Puesto que hay Outliers que nos impiden visualizar la imagen correctamente, eliminamos las viviendas con terrenos superiores a 25000"""

df2_pequenas = df2[df2["LotArea"]<25000]

plt.plot(df2_pequenas["LotArea"], df2_pequenas['SalePrice'],'.g')

"""Podemos visualizar de colores distintos los puntos que correspondan a valores distintos en una variable categórica. Por ejemplo, en MSZoning"""

df2_rl = df2_pequenas[df2_pequenas["MSZoning"]=="RL"]
df2_rm = df2_pequenas[df2_pequenas["MSZoning"]=="RM"]

plt.plot(df2_rl["LotArea"], df2_rl['SalePrice'],'.g')
plt.plot(df2_rm["LotArea"], df2_rm['SalePrice'],'.r')

"""Mejor:"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.scatterplot(data=df2_pequenas, x="LotArea", y="SalePrice", hue="MSZoning")
plt.show()

"""## 11. Realizar un gráfico de la variable “MSZoning”."""

import matplotlib.pyplot as plt
#plt.plot(df2['MSZoning'],'.')

df2['MSZoning'].value_counts().plot(x='MSZoning',y='frecuencia',kind='bar', legend=True,title='Distribucion de MSZoning')

"""## 12. Seleccionar los datos numéricos."""

df2_num = df2[df2.describe().columns]

# df2_num = df2.select_dtypes(include=['number'])
df2_num = df2.select_dtypes(include=np.number)

"""## 13. Graficar todas las relaciones entre las variables.

"""

import matplotlib.pyplot as plt
plt.matshow(df2_num.corr())

import seaborn as sns

f, ax = plt.subplots(figsize=(10, 8))
corr = df2_num.corr()
sns.heatmap(corr, # annot = True,
            mask=np.zeros_like(corr, dtype=bool),
            cmap=sns.diverging_palette(220, 10, as_cmap=True),
            square=True, ax=ax)

"""## 14. Crear un nuevo Data Frame con las 10 últimas variables.

"""

dat10 = df2_num.iloc[:,-10:]

dat10

"""## 15. Analizar la relación de estas variables con dos gráficos diferentes.

"""

plt.matshow(dat10.corr())

f, ax = plt.subplots(figsize=(10, 8))
corr = dat10.corr()
sns.heatmap(corr, annot = True,
            mask=np.zeros_like(corr, dtype=bool),
            cmap=sns.diverging_palette(220, 10, as_cmap=True),
            square=True, ax=ax);

"""## 16. Analizar la correlación entre las variables numéricas.

## 17. Eliminar los valores perdidos.
"""

dat=dat10.dropna()

"""## 18. Guardar los datos."""

df2.to_csv("final.csv", index=False)

